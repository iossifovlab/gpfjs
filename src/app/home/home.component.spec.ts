import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';
import { HttpClient, HttpHandler } from '@angular/common/http';
import { ConfigService } from 'app/config/config.service';
import { DatasetsService } from 'app/datasets/datasets.service';
import { UsersService } from 'app/users/users.service';
import { APP_BASE_HREF } from '@angular/common';
import { DatasetsTreeService } from 'app/datasets/datasets-tree.service';
import { Observable, of, throwError } from 'rxjs';
import { GeneService } from 'app/gene-browser/gene.service';
import {
  MatAutocompleteOrigin,
  MatAutocomplete,
  MatAutocompleteTrigger,
  MAT_AUTOCOMPLETE_SCROLL_STRATEGY } from '@angular/material/autocomplete';
import { GeneProfilesSingleViewConfig } from 'app/gene-profiles-single-view/gene-profiles-single-view';
import { StoreModule } from '@ngrx/store';

class MockGeneService {
  public getGene(): Observable<Record<string, unknown>> {
    return of(
      {
        geneSymbol: 'CHD8',
        collapsedTranscripts: [{
          start: 1,
          stop: 2
        }],
        getRegionString: () => ''
      });
  }
}
describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;
  const mockGeneService = new MockGeneService();

  beforeEach(async() => {
    await TestBed.configureTestingModule({
      declarations: [HomeComponent],
      providers: [
        HttpClient,
        HttpHandler,
        ConfigService,
        DatasetsService,
        UsersService,
        { provide: APP_BASE_HREF, useValue: '' },
        { provide: GeneService, useValue: mockGeneService },
        { provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY, useValue: ''},
        DatasetsTreeService,
      ],
      imports: [StoreModule.forRoot({}), MatAutocompleteOrigin, MatAutocomplete, MatAutocompleteTrigger]
    }).compileComponents();

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should open sinle view', () => {
    component.loadingFinished = true;
    component.content = {};
    component.geneProfilesConfig = new GeneProfilesSingleViewConfig();
    fixture.detectChanges();

    let geneSymbols = 'CHD8';
    component.openSingleView(geneSymbols);
    expect(component.geneSymbol).toBe('CHD8');

    geneSymbols = '  CHD8 ';
    component.openSingleView(geneSymbols);
    expect(component.geneSymbol).toBe('CHD8');

    geneSymbols = 'chd8';
    component.openSingleView(geneSymbols);
    expect(component.geneSymbol).toBe('CHD8');
  });

  it('should show error message when searching gene', () => {
    component.showError = true;

    component.loadingFinished = true;
    component.content = {};
    component.geneProfilesConfig = new GeneProfilesSingleViewConfig();
    fixture.detectChanges();

    let geneSymbols = '   ';
    component.openSingleView(geneSymbols);
    expect(component.geneSymbol).toBe('');

    jest.spyOn(mockGeneService, 'getGene').mockImplementation(() => throwError(() => new Error()));

    geneSymbols = 'CHD';
    component.showError = false;
    component.openSingleView(geneSymbols);
    expect(component.showError).toBe(true);
  });

  it('should get first parapraph of description when title and description are separated by new line', () => {
    const desc = '## SSC CSHL WGS\n' +
    '*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.' +
    '\n\n' +
    '### Disclaimer' +
    '\n\n' +
    'The use of the Simons Simplex and Simons Searchlight Collections is limited to' +
    'projects that advance the study of autism and related developmental disorders.' +
    'Questions on consents for the Simons Simplex Collection and the Simons' +
    'Searchlight should be directed to collections@sfari.org.';

    const result = component.getFirstParagraph(desc);
    expect(result).toBe('*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.');
  });

  it('should get first parapraph of description when title and description are separated by empty line', () => {
    const desc = '## SSC CSHL WGS\n\n' +
    '*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.' +
    '\n\n' +
    '### Disclaimer' +
    '\n\n' +
    'The use of the Simons Simplex and Simons Searchlight Collections is limited to' +
    'projects that advance the study of autism and related developmental disorders.' +
    'Questions on consents for the Simons Simplex Collection and the Simons' +
    'Searchlight should be directed to collections@sfari.org.';

    const result = component.getFirstParagraph(desc);
    expect(result).toBe('*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.');
  });

  it('should get first parapraph of description when there is no title', () => {
    const desc =
    '*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.' +
    '\n\n' +
    '### Disclaimer' +
    '\n\n' +
    'The use of the Simons Simplex and Simons Searchlight Collections is limited to' +
    'projects that advance the study of autism and related developmental disorders.' +
    'Questions on consents for the Simons Simplex Collection and the Simons' +
    'Searchlight should be directed to collections@sfari.org.';

    const result = component.getFirstParagraph(desc);
    expect(result).toBe('*De novo* and transmitted substitutions and indel calls generated by the' +
    'Iossifov lab from the whole-genome sequencing from 2,379 SSC families.' +
    'NYGC generated the whole-genome data from DNA extracted from whole blood.');
  });
});
