FORMAT: 1A

# Genotypes and Phenotypes in Families (GPF) API

## Group Dataset Configurations

### Datasets [/dataset]

#### Get All Datasets [GET]
Returns all supported datasets

+ Response 200 (application/json)

          {
            "data":
                [
                  {
                    "id": "we",
                    "description": "Sequencing de Novo Dataset"
                  },
                  {
                    "id": "ssc",
                    "description": "SSC Dataset"
                  },
                  {
                    "id": "vip",
                    "description": "VIP Dataset"
                  },
                  {
                    "id": "agre",
                    "description": "AGRE Dataset"
                  }
                ]
          }
### Dateset Details [/dataset/{dataset_id}]
#### Get Dataset Details [GET]
Returns dataset details given `dataset_id`.
+ Parameters
  + dataset_id (string) - ID of a dataset returned by `/dataset` endpoint.

+ Response 200 (application/json)

          {
            "data":
              {
                id: 'ssc',
                description: 'SSC Dataset',
                hasDenovo: true,
                hasTransmitted: true,
                hasCnv: true,
                hasPhenoDb: true
              }
          }


+ Response 404 (application/json)

          {
            "reason": "Dataset 'dataset_id' not found"
          }

### Dataset Phenotypes [/dataset/{dataset_id}/phenotypes]
#### Get Dataset Phenotypes [GET]
Returns all phenotypes in given dataset.
+ Parameters
  + dataset_id (string) - ID of a dataset returned by `/dataset` endpoint.

+ Response 200 (application/json)

          {
            "data":
              [
                {
                  "id": "autism",
                  "description": "autism",
                  "color": "#e35252"
                },
                {
                  "id": "congenital_heart_disease",
                  "description": "congenital heart disease",
                  "color": "#b8008a"
                },
                {
                  "id": "epilepsy",
                  "description": "epilepsy",
                  "color": "#e3d252"
                },
                {
                  "id": "intelectual_disability",
                  "description": "intelectual disability",
                  "color": "#99d8e8"
                },
                {
                  "id": "schizophrenia",
                  "description": "schizophrenia",
                  "color": "#98e352"
                },
                {
                  "id": "unaffected",
                  "description": "unaffected",
                  "color": "#ffffff"
                }
              ]
          }

+ Response 404 (application/json)

          {
            "reason": "Dataset 'dataset_id' not found"
          }

### Dataset Study Types [/dataset/{dataset_id}/studytypes]
#### Get Dataset Study Types [GET]
Returns all study types in given dataset.
+ Parameters
  + dataset_id (string) - ID of a dataset returned by `/dataset` endpoint.

+ Response 200 (application/json)

          {
            "data":
              [
                {
                  "id": "WE",
                  "description": "Whole Exome"
                },
                {
                  "id": "TG",
                  "description": "Targeted Genome"
                },
                {
                  "id": "WG",
                  "description": "Whole Genome"
                }
              ]
          }

+ Response 404 (application/json)

          {
            "error": "Dataset 'dataset_id' not found"
          }



### Effect Types Groups [/effecttype/group]

#### Get Available Effect Types Groups [GET]
Returns all availble effect types groups

+ Response 200 (application/json)

          {
            "data":
              [
                {
                  "id": "coding",
                  "description": "Coding"
                },
                {
                  "id": "noncoding",
                  "description": "Noncoding"
                },
                {
                  "id": "cnv",
                  "description": "CNV"
                },
                {
                  "id": "lgds",
                  "description": "LGDs"
                },
                {
                  "id": "nonsynonymous",
                  "description": "Nonsynonymous"
                },
                {
                  "id": "all",
                  "description": "All"
                },
                {
                  "id": "none",
                  "description": "None"
                }
              ]
          }


### Effect Types in a Group [/effecttypes/group/{group_id}]

#### Get Available Effect Types Groups [GET]
Returns all availble effect types in a given groups
+ Parameters
  + group_id (string) - ID of an effect types group.

+ Response 200 (application/json)
  + Body

            {
              "data":
                [
                  "Nonsense",
                  "Frame-shift",
                  "Splice-site",
                  "Missense",
                  "Non-frame-shift",
                  "noStart",
                  "noEnd"
                ]
            }


### Effect Types Groups for given Dataset [/effecttypes/dataset/{dataset_id}/columns]

#### Get Effect Types Groups for Given Dataset [GET]
Returns all effect types groups for givent dataset.
+ Parameters
  + dataset_id (string) - ID of a dataset

+ Response 200 (application/json)

          {
            "data":
            [
              {
                "id":"coding",
                "description": "Coding"
              },
              {
                "id": "noncoding",
                "description": "Noncoding"
              }
            ]
          }

### Effect Types Groups Buttons for Given Dataset [/effecttypes/dataset/{dataset_id}/buttons]

#### Get Effect Types Groups for given Dataset [GET]
Returns all effect types groups for givent dataset.
+ Parameters
  + dataset_id (string) - ID of a dataset

+ Response 200 (application/json)

          {
            "data":
            [
              {
                "id": "all",
                "description": "All"
              },
              {
                "id": "none",
                "description": "None"
              },
              {
                "id": "lgds",
                "description": "LGDs"
              },
              {
                "id": "nonsynonymous",
                "description": "Nonsynonymous"
              },
              {
                "id": "utrs",
                "description": "UTRs"
              }
            ]
          }
